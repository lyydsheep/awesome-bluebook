// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/user.go -package=svcmocks -destination=internal/web/mock/user_gen.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lyydsheep/awesome-bluebook/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBasicUserService is a mock of BasicUserService interface.
type MockBasicUserService struct {
	ctrl     *gomock.Controller
	recorder *MockBasicUserServiceMockRecorder
}

// MockBasicUserServiceMockRecorder is the mock recorder for MockBasicUserService.
type MockBasicUserServiceMockRecorder struct {
	mock *MockBasicUserService
}

// NewMockBasicUserService creates a new mock instance.
func NewMockBasicUserService(ctrl *gomock.Controller) *MockBasicUserService {
	mock := &MockBasicUserService{ctrl: ctrl}
	mock.recorder = &MockBasicUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicUserService) EXPECT() *MockBasicUserServiceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockBasicUserService) SignUp(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockBasicUserServiceMockRecorder) SignUp(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockBasicUserService)(nil).SignUp), ctx, u)
}
